// Generated by gencpp from file utils/KeyboardCommand.msg
// DO NOT EDIT!


#ifndef UTILS_MESSAGE_KEYBOARDCOMMAND_H
#define UTILS_MESSAGE_KEYBOARDCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace utils
{
template <class ContainerAllocator>
struct KeyboardCommand_
{
  typedef KeyboardCommand_<ContainerAllocator> Type;

  KeyboardCommand_()
    : header()
    , mode(0)
    , thruster_speed(0.0)
    , rudder_angle(0.0)
    , mass_shifter_position(0.0)
    , piston_position(0.0)
    , controll_lock(false)  {
    }
  KeyboardCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , mode(0)
    , thruster_speed(0.0)
    , rudder_angle(0.0)
    , mass_shifter_position(0.0)
    , piston_position(0.0)
    , controll_lock(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef double _thruster_speed_type;
  _thruster_speed_type thruster_speed;

   typedef double _rudder_angle_type;
  _rudder_angle_type rudder_angle;

   typedef double _mass_shifter_position_type;
  _mass_shifter_position_type mass_shifter_position;

   typedef double _piston_position_type;
  _piston_position_type piston_position;

   typedef uint8_t _controll_lock_type;
  _controll_lock_type controll_lock;





  typedef boost::shared_ptr< ::utils::KeyboardCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::utils::KeyboardCommand_<ContainerAllocator> const> ConstPtr;

}; // struct KeyboardCommand_

typedef ::utils::KeyboardCommand_<std::allocator<void> > KeyboardCommand;

typedef boost::shared_ptr< ::utils::KeyboardCommand > KeyboardCommandPtr;
typedef boost::shared_ptr< ::utils::KeyboardCommand const> KeyboardCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::utils::KeyboardCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::utils::KeyboardCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::utils::KeyboardCommand_<ContainerAllocator1> & lhs, const ::utils::KeyboardCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.mode == rhs.mode &&
    lhs.thruster_speed == rhs.thruster_speed &&
    lhs.rudder_angle == rhs.rudder_angle &&
    lhs.mass_shifter_position == rhs.mass_shifter_position &&
    lhs.piston_position == rhs.piston_position &&
    lhs.controll_lock == rhs.controll_lock;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::utils::KeyboardCommand_<ContainerAllocator1> & lhs, const ::utils::KeyboardCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::utils::KeyboardCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::KeyboardCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::KeyboardCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::KeyboardCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::KeyboardCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::KeyboardCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::utils::KeyboardCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f456ef01faab9a8ce9fd535bd2d7c397";
  }

  static const char* value(const ::utils::KeyboardCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf456ef01faab9a8cULL;
  static const uint64_t static_value2 = 0xe9fd535bd2d7c397ULL;
};

template<class ContainerAllocator>
struct DataType< ::utils::KeyboardCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "utils/KeyboardCommand";
  }

  static const char* value(const ::utils::KeyboardCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::utils::KeyboardCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"uint8 mode\n"
"\n"
"float64 thruster_speed\n"
"float64 rudder_angle\n"
"float64 mass_shifter_position\n"
"float64 piston_position\n"
"bool controll_lock\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::utils::KeyboardCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::utils::KeyboardCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.mode);
      stream.next(m.thruster_speed);
      stream.next(m.rudder_angle);
      stream.next(m.mass_shifter_position);
      stream.next(m.piston_position);
      stream.next(m.controll_lock);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct KeyboardCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::utils::KeyboardCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::utils::KeyboardCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "thruster_speed: ";
    Printer<double>::stream(s, indent + "  ", v.thruster_speed);
    s << indent << "rudder_angle: ";
    Printer<double>::stream(s, indent + "  ", v.rudder_angle);
    s << indent << "mass_shifter_position: ";
    Printer<double>::stream(s, indent + "  ", v.mass_shifter_position);
    s << indent << "piston_position: ";
    Printer<double>::stream(s, indent + "  ", v.piston_position);
    s << indent << "controll_lock: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.controll_lock);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UTILS_MESSAGE_KEYBOARDCOMMAND_H
