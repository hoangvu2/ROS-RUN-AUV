// Generated by gencpp from file utils/BoardARM1Status.msg
// DO NOT EDIT!


#ifndef UTILS_MESSAGE_BOARDARM1STATUS_H
#define UTILS_MESSAGE_BOARDARM1STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace utils
{
template <class ContainerAllocator>
struct BoardARM1Status_
{
  typedef BoardARM1Status_<ContainerAllocator> Type;

  BoardARM1Status_()
    : header()
    , ls_piston_athead(0)
    , ls_piston_attail(0)
    , ls_mass_shifter_athead(0)
    , ls_mass_shifter_attail(0)
    , altimeter_in_metres(0.0)
    , altimeter_in_feet(0.0)
    , altimeter_in_fathoms(0.0)
    , alarm_1_head(0)
    , alarm_2_head(0)
    , alarm_3_head(0)  {
    }
  BoardARM1Status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ls_piston_athead(0)
    , ls_piston_attail(0)
    , ls_mass_shifter_athead(0)
    , ls_mass_shifter_attail(0)
    , altimeter_in_metres(0.0)
    , altimeter_in_feet(0.0)
    , altimeter_in_fathoms(0.0)
    , alarm_1_head(0)
    , alarm_2_head(0)
    , alarm_3_head(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _ls_piston_athead_type;
  _ls_piston_athead_type ls_piston_athead;

   typedef uint8_t _ls_piston_attail_type;
  _ls_piston_attail_type ls_piston_attail;

   typedef uint8_t _ls_mass_shifter_athead_type;
  _ls_mass_shifter_athead_type ls_mass_shifter_athead;

   typedef uint8_t _ls_mass_shifter_attail_type;
  _ls_mass_shifter_attail_type ls_mass_shifter_attail;

   typedef double _altimeter_in_metres_type;
  _altimeter_in_metres_type altimeter_in_metres;

   typedef double _altimeter_in_feet_type;
  _altimeter_in_feet_type altimeter_in_feet;

   typedef double _altimeter_in_fathoms_type;
  _altimeter_in_fathoms_type altimeter_in_fathoms;

   typedef uint8_t _alarm_1_head_type;
  _alarm_1_head_type alarm_1_head;

   typedef uint8_t _alarm_2_head_type;
  _alarm_2_head_type alarm_2_head;

   typedef uint8_t _alarm_3_head_type;
  _alarm_3_head_type alarm_3_head;





  typedef boost::shared_ptr< ::utils::BoardARM1Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::utils::BoardARM1Status_<ContainerAllocator> const> ConstPtr;

}; // struct BoardARM1Status_

typedef ::utils::BoardARM1Status_<std::allocator<void> > BoardARM1Status;

typedef boost::shared_ptr< ::utils::BoardARM1Status > BoardARM1StatusPtr;
typedef boost::shared_ptr< ::utils::BoardARM1Status const> BoardARM1StatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::utils::BoardARM1Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::utils::BoardARM1Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::utils::BoardARM1Status_<ContainerAllocator1> & lhs, const ::utils::BoardARM1Status_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ls_piston_athead == rhs.ls_piston_athead &&
    lhs.ls_piston_attail == rhs.ls_piston_attail &&
    lhs.ls_mass_shifter_athead == rhs.ls_mass_shifter_athead &&
    lhs.ls_mass_shifter_attail == rhs.ls_mass_shifter_attail &&
    lhs.altimeter_in_metres == rhs.altimeter_in_metres &&
    lhs.altimeter_in_feet == rhs.altimeter_in_feet &&
    lhs.altimeter_in_fathoms == rhs.altimeter_in_fathoms &&
    lhs.alarm_1_head == rhs.alarm_1_head &&
    lhs.alarm_2_head == rhs.alarm_2_head &&
    lhs.alarm_3_head == rhs.alarm_3_head;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::utils::BoardARM1Status_<ContainerAllocator1> & lhs, const ::utils::BoardARM1Status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::utils::BoardARM1Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::BoardARM1Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::BoardARM1Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::BoardARM1Status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::BoardARM1Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::BoardARM1Status_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::utils::BoardARM1Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0a28fffcadb31a721a41b0390a47c8af";
  }

  static const char* value(const ::utils::BoardARM1Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0a28fffcadb31a72ULL;
  static const uint64_t static_value2 = 0x1a41b0390a47c8afULL;
};

template<class ContainerAllocator>
struct DataType< ::utils::BoardARM1Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "utils/BoardARM1Status";
  }

  static const char* value(const ::utils::BoardARM1Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::utils::BoardARM1Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"uint8 ls_piston_athead\n"
"uint8 ls_piston_attail\n"
"uint8 ls_mass_shifter_athead\n"
"uint8 ls_mass_shifter_attail\n"
"float64 altimeter_in_metres\n"
"float64 altimeter_in_feet\n"
"float64 altimeter_in_fathoms\n"
"uint8 alarm_1_head\n"
"uint8 alarm_2_head\n"
"uint8 alarm_3_head\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::utils::BoardARM1Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::utils::BoardARM1Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ls_piston_athead);
      stream.next(m.ls_piston_attail);
      stream.next(m.ls_mass_shifter_athead);
      stream.next(m.ls_mass_shifter_attail);
      stream.next(m.altimeter_in_metres);
      stream.next(m.altimeter_in_feet);
      stream.next(m.altimeter_in_fathoms);
      stream.next(m.alarm_1_head);
      stream.next(m.alarm_2_head);
      stream.next(m.alarm_3_head);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoardARM1Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::utils::BoardARM1Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::utils::BoardARM1Status_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ls_piston_athead: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ls_piston_athead);
    s << indent << "ls_piston_attail: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ls_piston_attail);
    s << indent << "ls_mass_shifter_athead: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ls_mass_shifter_athead);
    s << indent << "ls_mass_shifter_attail: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ls_mass_shifter_attail);
    s << indent << "altimeter_in_metres: ";
    Printer<double>::stream(s, indent + "  ", v.altimeter_in_metres);
    s << indent << "altimeter_in_feet: ";
    Printer<double>::stream(s, indent + "  ", v.altimeter_in_feet);
    s << indent << "altimeter_in_fathoms: ";
    Printer<double>::stream(s, indent + "  ", v.altimeter_in_fathoms);
    s << indent << "alarm_1_head: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alarm_1_head);
    s << indent << "alarm_2_head: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alarm_2_head);
    s << indent << "alarm_3_head: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alarm_3_head);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UTILS_MESSAGE_BOARDARM1STATUS_H
