// Generated by gencpp from file utils/BoardARM2Status.msg
// DO NOT EDIT!


#ifndef UTILS_MESSAGE_BOARDARM2STATUS_H
#define UTILS_MESSAGE_BOARDARM2STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace utils
{
template <class ContainerAllocator>
struct BoardARM2Status_
{
  typedef BoardARM2Status_<ContainerAllocator> Type;

  BoardARM2Status_()
    : header()
    , rudder_position(0.0)
    , rudder_speed(0.0)
    , rudder_load(0.0)
    , rudder_voltage(0.0)
    , rudder_temperature(0.0)
    , keller_pa3_pressure(0.0)
    , keller_pa3_temperature(0.0)
    , alarm_1_tail(0)
    , alarm_2_tail(0)
    , alarm_3_tail(0)  {
    }
  BoardARM2Status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , rudder_position(0.0)
    , rudder_speed(0.0)
    , rudder_load(0.0)
    , rudder_voltage(0.0)
    , rudder_temperature(0.0)
    , keller_pa3_pressure(0.0)
    , keller_pa3_temperature(0.0)
    , alarm_1_tail(0)
    , alarm_2_tail(0)
    , alarm_3_tail(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _rudder_position_type;
  _rudder_position_type rudder_position;

   typedef double _rudder_speed_type;
  _rudder_speed_type rudder_speed;

   typedef double _rudder_load_type;
  _rudder_load_type rudder_load;

   typedef double _rudder_voltage_type;
  _rudder_voltage_type rudder_voltage;

   typedef double _rudder_temperature_type;
  _rudder_temperature_type rudder_temperature;

   typedef double _keller_pa3_pressure_type;
  _keller_pa3_pressure_type keller_pa3_pressure;

   typedef double _keller_pa3_temperature_type;
  _keller_pa3_temperature_type keller_pa3_temperature;

   typedef uint8_t _alarm_1_tail_type;
  _alarm_1_tail_type alarm_1_tail;

   typedef uint8_t _alarm_2_tail_type;
  _alarm_2_tail_type alarm_2_tail;

   typedef uint8_t _alarm_3_tail_type;
  _alarm_3_tail_type alarm_3_tail;





  typedef boost::shared_ptr< ::utils::BoardARM2Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::utils::BoardARM2Status_<ContainerAllocator> const> ConstPtr;

}; // struct BoardARM2Status_

typedef ::utils::BoardARM2Status_<std::allocator<void> > BoardARM2Status;

typedef boost::shared_ptr< ::utils::BoardARM2Status > BoardARM2StatusPtr;
typedef boost::shared_ptr< ::utils::BoardARM2Status const> BoardARM2StatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::utils::BoardARM2Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::utils::BoardARM2Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::utils::BoardARM2Status_<ContainerAllocator1> & lhs, const ::utils::BoardARM2Status_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.rudder_position == rhs.rudder_position &&
    lhs.rudder_speed == rhs.rudder_speed &&
    lhs.rudder_load == rhs.rudder_load &&
    lhs.rudder_voltage == rhs.rudder_voltage &&
    lhs.rudder_temperature == rhs.rudder_temperature &&
    lhs.keller_pa3_pressure == rhs.keller_pa3_pressure &&
    lhs.keller_pa3_temperature == rhs.keller_pa3_temperature &&
    lhs.alarm_1_tail == rhs.alarm_1_tail &&
    lhs.alarm_2_tail == rhs.alarm_2_tail &&
    lhs.alarm_3_tail == rhs.alarm_3_tail;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::utils::BoardARM2Status_<ContainerAllocator1> & lhs, const ::utils::BoardARM2Status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::utils::BoardARM2Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::BoardARM2Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::BoardARM2Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::BoardARM2Status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::BoardARM2Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::BoardARM2Status_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::utils::BoardARM2Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "34e8d9a8f4a44099f2b6cfe4641907d2";
  }

  static const char* value(const ::utils::BoardARM2Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x34e8d9a8f4a44099ULL;
  static const uint64_t static_value2 = 0xf2b6cfe4641907d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::utils::BoardARM2Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "utils/BoardARM2Status";
  }

  static const char* value(const ::utils::BoardARM2Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::utils::BoardARM2Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"float64 rudder_position\n"
"float64 rudder_speed\n"
"float64 rudder_load\n"
"float64 rudder_voltage\n"
"float64 rudder_temperature\n"
"float64 keller_pa3_pressure\n"
"float64 keller_pa3_temperature\n"
"uint8 alarm_1_tail\n"
"uint8 alarm_2_tail\n"
"uint8 alarm_3_tail\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::utils::BoardARM2Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::utils::BoardARM2Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.rudder_position);
      stream.next(m.rudder_speed);
      stream.next(m.rudder_load);
      stream.next(m.rudder_voltage);
      stream.next(m.rudder_temperature);
      stream.next(m.keller_pa3_pressure);
      stream.next(m.keller_pa3_temperature);
      stream.next(m.alarm_1_tail);
      stream.next(m.alarm_2_tail);
      stream.next(m.alarm_3_tail);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoardARM2Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::utils::BoardARM2Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::utils::BoardARM2Status_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "rudder_position: ";
    Printer<double>::stream(s, indent + "  ", v.rudder_position);
    s << indent << "rudder_speed: ";
    Printer<double>::stream(s, indent + "  ", v.rudder_speed);
    s << indent << "rudder_load: ";
    Printer<double>::stream(s, indent + "  ", v.rudder_load);
    s << indent << "rudder_voltage: ";
    Printer<double>::stream(s, indent + "  ", v.rudder_voltage);
    s << indent << "rudder_temperature: ";
    Printer<double>::stream(s, indent + "  ", v.rudder_temperature);
    s << indent << "keller_pa3_pressure: ";
    Printer<double>::stream(s, indent + "  ", v.keller_pa3_pressure);
    s << indent << "keller_pa3_temperature: ";
    Printer<double>::stream(s, indent + "  ", v.keller_pa3_temperature);
    s << indent << "alarm_1_tail: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alarm_1_tail);
    s << indent << "alarm_2_tail: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alarm_2_tail);
    s << indent << "alarm_3_tail: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alarm_3_tail);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UTILS_MESSAGE_BOARDARM2STATUS_H
